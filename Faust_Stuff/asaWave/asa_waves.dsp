declare version "2.54.9";
declare compile_options "-single -scal -e asaWave/asa_waves_og.dsp -o asaWave/asa_waves.dsp";
declare library_path0 "/usr/local/Cellar/faust/2.54.9/share/faust/stdfaust.lib";
declare library_path1 "/usr/local/Cellar/faust/2.54.9/share/faust/noises.lib";
declare library_path2 "/usr/local/Cellar/faust/2.54.9/share/faust/filters.lib";
declare library_path3 "/usr/local/Cellar/faust/2.54.9/share/faust/maths.lib";
declare library_path4 "/usr/local/Cellar/faust/2.54.9/share/faust/signals.lib";
declare library_path5 "/usr/local/Cellar/faust/2.54.9/share/faust/platform.lib";
declare library_path6 "/usr/local/Cellar/faust/2.54.9/share/faust/oscillators.lib";
declare library_path7 "/usr/local/Cellar/faust/2.54.9/share/faust/basics.lib";
declare author "Jeremy WY";
declare basics_lib_name "Faust Basic Element Library";
declare basics_lib_version "0.9";
declare copyright "GRAME";
declare filename "asa_waves_og.dsp";
declare filters_lib_fir_author "Julius O. Smith III";
declare filters_lib_fir_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_fir_license "MIT-style STK-4.3 license";
declare filters_lib_iir_author "Julius O. Smith III";
declare filters_lib_iir_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_iir_license "MIT-style STK-4.3 license";
declare filters_lib_lowpass0_highpass1 "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_lowpass0_highpass1_author "Julius O. Smith III";
declare filters_lib_lowpass_author "Julius O. Smith III";
declare filters_lib_lowpass_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_lowpass_license "MIT-style STK-4.3 license";
declare filters_lib_name "Faust Filters Library";
declare filters_lib_resonbp_author "Julius O. Smith III";
declare filters_lib_resonbp_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_resonbp_license "MIT-style STK-4.3 license";
declare filters_lib_tf2_author "Julius O. Smith III";
declare filters_lib_tf2_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf2_license "MIT-style STK-4.3 license";
declare filters_lib_tf2s_author "Julius O. Smith III";
declare filters_lib_tf2s_copyright "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_tf2s_license "MIT-style STK-4.3 license";
declare filters_lib_version "0.3";
declare license "LGPL with exception";
declare maths_lib_author "GRAME";
declare maths_lib_copyright "GRAME";
declare maths_lib_license "LGPL with exception";
declare maths_lib_name "Faust Math Library";
declare maths_lib_version "2.5";
declare name "asa_waves_og";
declare noises_lib_name "Faust Noise Generator Library";
declare noises_lib_version "0.4";
declare oscillators_lib_name "Faust Oscillator Library";
declare oscillators_lib_version "0.3";
declare platform_lib_name "Generic Platform Library";
declare platform_lib_version "0.3";
declare signals_lib_name "Faust Signal Routing Library";
declare signals_lib_version "0.3";
ID_0 = _, 12345;
ID_1 = (ID_0 : +);
ID_2 = _, 1103515245;
ID_3 = (ID_2 : *);
ID_4 = ID_1 ~ ID_3;
ID_5 = ID_4, 2.1474836e+09f;
ID_6 = ID_5 : /;
ID_7 = _, -2.494956f;
ID_8 = (ID_7 : *);
ID_9 = _, 1;
ID_10 = ID_9 : @;
ID_11 = _, 2.0172658f;
ID_12 = ID_11 : *;
ID_13 = (ID_10 : ID_12);
ID_14 = _, 2;
ID_15 = ID_14 : @;
ID_16 = _, -0.5221894f;
ID_17 = ID_16 : *;
ID_18 = (ID_15 : ID_17);
ID_19 = ID_13, ID_18;
ID_20 = ID_8, ID_19;
ID_21 = ID_20 :> _;
ID_22 = (_ <: ID_21);
ID_23 = \(x62).(\(x63).(x63,x62 : -)) ~ ID_22;
ID_24 = _, 0.049922034f;
ID_25 = (ID_24 : *);
ID_26 = _, -0.095993534f;
ID_27 = ID_26 : *;
ID_28 = (ID_10 : ID_27);
ID_29 = _, 0.0506127f;
ID_30 = ID_29 : *;
ID_31 = (ID_15 : ID_30);
ID_32 = _, 3;
ID_33 = ID_32 : @;
ID_34 = _, -0.004408786f;
ID_35 = ID_34 : *;
ID_36 = (ID_33 : ID_35);
ID_37 = ID_31, ID_36;
ID_38 = ID_28, ID_37;
ID_39 = ID_25, ID_38;
ID_40 = ID_39 :> _;
ID_41 = _ <: ID_40;
ID_42 = ID_23 : ID_41;
ID_43 = (ID_6 : ID_42);
ID_44 = ID_43, 0.2f;
ID_45 = ID_44 : *;
ID_46 = _, 65536;
ID_47 = (ID_46 : %);
ID_48 = (1 : mem);
ID_49 = _, ID_48;
ID_50 = (ID_49 : +);
ID_51 = ID_47 ~ ID_50;
ID_52 = (ID_51 : float);
ID_53 = ID_52, 6.2831855f;
ID_54 = (ID_53 : *);
ID_55 = ID_54, 65536.0f;
ID_56 = ID_55 : /;
ID_57 = (ID_56 : sin);
ID_58 = hslider("lfoRate", 0.1f, 0.0f, 1e+01f, 0.01f);
ID_59 = fconstant(int fSamplingFreq, <math.h>);
ID_60 = 1.0f, ID_59;
ID_61 = (ID_60 : max);
ID_62 = 1.92e+05f, ID_61;
ID_63 = (ID_62 : min);
ID_64 = ID_58, ID_63;
ID_65 = (ID_64 : /);
ID_66 = _, ID_65;
ID_67 = (ID_66 : +);
ID_68 = ID_67, 0;
ID_69 = 0, ID_68;
ID_70 = ID_69 : select2;
ID_71 = (ID_70 : \(x29).(x29,(x29 : floor) : -));
ID_72 = ID_71 ~ _;
ID_73 = _, 65536.0f;
ID_74 = ID_73 : *;
ID_75 = ID_72 : ID_74;
ID_76 = (ID_75 : int);
ID_77 = ID_57, ID_76;
ID_78 = 65536, ID_77;
ID_79 = (ID_78 : rdtable);
ID_80 = ID_79, 0.5f;
ID_81 = (ID_80 : *);
ID_82 = ID_81, 0.5f;
ID_83 = (ID_82 : +);
ID_84 = hslider("lfoDepth", 125.0f, 0.0f, 1e+03f, 0.01f);
ID_85 = ID_83, ID_84;
ID_86 = (ID_85 : *);
ID_87 = hslider("lfoRoot", 1e+02f, 2e+01f, 1e+04f, 0.01f);
ID_88 = (ID_87 : \(x30).(\(x31).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x30 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x31 : *) : +)~_));
ID_89 = ID_86, ID_88;
ID_90 = (ID_89 : +);
ID_91 = ID_90, 15;
ID_92 = (ID_91 : max);
ID_93 = ID_92, 20000;
ID_94 = (ID_93 : min);
ID_95 = 6.2831855f, ID_94;
ID_96 = (ID_95 : *);
ID_97 = ID_96, 0.5f;
ID_98 = (ID_97 : *);
ID_99 = ID_98, ID_63;
ID_100 = ID_99 : /;
ID_101 = (ID_100 : tan);
ID_102 = 1, ID_101;
ID_103 = (ID_102 : /);
ID_104 = ID_103, ID_103;
ID_105 = (ID_104 : *);
ID_106 = 1, ID_105;
ID_107 = (ID_106 : -);
ID_108 = 2, ID_107;
ID_109 = (ID_108 : *);
ID_110 = hslider("filtQ", 1.1f, 1.0f, 1e+02f, 0.01f);
ID_111 = (ID_110 : \(x32).(\(x33).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x32 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x33 : *) : +)~_));
ID_112 = 1, ID_111;
ID_113 = (ID_112 : /);
ID_114 = ID_113, ID_103;
ID_115 = (ID_114 : *);
ID_116 = 1, ID_115;
ID_117 = (ID_116 : +);
ID_118 = ID_117, ID_105;
ID_119 = (ID_118 : +);
ID_120 = ID_109, ID_119;
ID_121 = (ID_120 : /);
ID_122 = _, ID_121;
ID_123 = (ID_122 : *);
ID_124 = (ID_110 : \(x34).(\(x35).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x34 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x35 : *) : +)~_));
ID_125 = 1, ID_124;
ID_126 = (ID_125 : /);
ID_127 = (ID_70 : \(x36).(x36,(x36 : floor) : -));
ID_128 = ID_127 ~ _;
ID_129 = ID_128 : ID_74;
ID_130 = (ID_129 : int);
ID_131 = ID_57, ID_130;
ID_132 = 65536, ID_131;
ID_133 = (ID_132 : rdtable);
ID_134 = ID_133, 0.5f;
ID_135 = (ID_134 : *);
ID_136 = ID_135, 0.5f;
ID_137 = (ID_136 : +);
ID_138 = ID_137, ID_84;
ID_139 = (ID_138 : *);
ID_140 = (ID_87 : \(x37).(\(x38).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x37 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x38 : *) : +)~_));
ID_141 = ID_139, ID_140;
ID_142 = (ID_141 : +);
ID_143 = ID_142, 15;
ID_144 = (ID_143 : max);
ID_145 = ID_144, 20000;
ID_146 = (ID_145 : min);
ID_147 = 6.2831855f, ID_146;
ID_148 = (ID_147 : *);
ID_149 = ID_148, 0.5f;
ID_150 = (ID_149 : *);
ID_151 = ID_150, ID_63;
ID_152 = ID_151 : /;
ID_153 = (ID_152 : tan);
ID_154 = 1, ID_153;
ID_155 = (ID_154 : /);
ID_156 = ID_126, ID_155;
ID_157 = (ID_156 : *);
ID_158 = 1, ID_157;
ID_159 = (ID_158 : -);
ID_160 = ID_155, ID_155;
ID_161 = (ID_160 : *);
ID_162 = ID_159, ID_161;
ID_163 = (ID_162 : +);
ID_164 = (ID_158 : +);
ID_165 = ID_164, ID_161;
ID_166 = (ID_165 : +);
ID_167 = ID_163, ID_166;
ID_168 = (ID_167 : /);
ID_169 = _, ID_168;
ID_170 = ID_169 : *;
ID_171 = (ID_10 : ID_170);
ID_172 = ID_123, ID_171;
ID_173 = ID_172 :> _;
ID_174 = (_ <: ID_173);
ID_175 = \(x64).(\(x65).(x65,x64 : -)) ~ ID_174;
ID_176 = 0.5f, ID_103;
ID_177 = (ID_176 : *);
ID_178 = 0, ID_177;
ID_179 = (ID_178 : +);
ID_180 = 0, ID_105;
ID_181 = (ID_180 : *);
ID_182 = ID_179, ID_181;
ID_183 = (ID_182 : +);
ID_184 = ID_183, ID_119;
ID_185 = (ID_184 : /);
ID_186 = _, ID_185;
ID_187 = (ID_186 : *);
ID_188 = _, 0;
ID_189 = ID_188 : *;
ID_190 = (ID_10 : ID_189);
ID_191 = (ID_70 : \(x39).(x39,(x39 : floor) : -));
ID_192 = ID_191 ~ _;
ID_193 = ID_192 : ID_74;
ID_194 = (ID_193 : int);
ID_195 = ID_57, ID_194;
ID_196 = 65536, ID_195;
ID_197 = (ID_196 : rdtable);
ID_198 = ID_197, 0.5f;
ID_199 = (ID_198 : *);
ID_200 = ID_199, 0.5f;
ID_201 = (ID_200 : +);
ID_202 = ID_201, ID_84;
ID_203 = (ID_202 : *);
ID_204 = (ID_87 : \(x40).(\(x41).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x40 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x41 : *) : +)~_));
ID_205 = ID_203, ID_204;
ID_206 = (ID_205 : +);
ID_207 = ID_206, 15;
ID_208 = (ID_207 : max);
ID_209 = ID_208, 20000;
ID_210 = (ID_209 : min);
ID_211 = 6.2831855f, ID_210;
ID_212 = (ID_211 : *);
ID_213 = ID_212, 0.5f;
ID_214 = (ID_213 : *);
ID_215 = ID_214, ID_63;
ID_216 = ID_215 : /;
ID_217 = (ID_216 : tan);
ID_218 = 1, ID_217;
ID_219 = (ID_218 : /);
ID_220 = 0.5f, ID_219;
ID_221 = (ID_220 : *);
ID_222 = 0, ID_221;
ID_223 = (ID_222 : -);
ID_224 = ID_219, ID_219;
ID_225 = (ID_224 : *);
ID_226 = 0, ID_225;
ID_227 = (ID_226 : *);
ID_228 = ID_223, ID_227;
ID_229 = (ID_228 : +);
ID_230 = (ID_110 : \(x42).(\(x43).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x42 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x43 : *) : +)~_));
ID_231 = 1, ID_230;
ID_232 = (ID_231 : /);
ID_233 = ID_232, ID_219;
ID_234 = (ID_233 : *);
ID_235 = 1, ID_234;
ID_236 = (ID_235 : +);
ID_237 = ID_236, ID_225;
ID_238 = (ID_237 : +);
ID_239 = ID_229, ID_238;
ID_240 = (ID_239 : /);
ID_241 = _, ID_240;
ID_242 = ID_241 : *;
ID_243 = (ID_15 : ID_242);
ID_244 = ID_190, ID_243;
ID_245 = ID_187, ID_244;
ID_246 = ID_245 :> _;
ID_247 = _ <: ID_246;
ID_248 = ID_175 : ID_247;
ID_249 = hslider("lopCut", 8e+02f, 2e+01f, 1e+04f, 0.01f);
ID_250 = (ID_249 : \(x56).(\(x57).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x56 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x57 : *) : +)~_));
ID_251 = 6.2831855f, ID_250;
ID_252 = (ID_251 : *);
ID_253 = ID_252, 0.5f;
ID_254 = (ID_253 : *);
ID_255 = ID_254, ID_63;
ID_256 = ID_255 : /;
ID_257 = (ID_256 : tan);
ID_258 = 1, ID_257;
ID_259 = (ID_258 : /);
ID_260 = ID_259, ID_259;
ID_261 = (ID_260 : *);
ID_262 = 1, ID_261;
ID_263 = (ID_262 : -);
ID_264 = 2, ID_263;
ID_265 = (ID_264 : *);
ID_266 = 1.4142135f, ID_259;
ID_267 = (ID_266 : *);
ID_268 = 1, ID_267;
ID_269 = (ID_268 : +);
ID_270 = ID_269, ID_261;
ID_271 = (ID_270 : +);
ID_272 = ID_265, ID_271;
ID_273 = (ID_272 : /);
ID_274 = _, ID_273;
ID_275 = (ID_274 : *);
ID_276 = (ID_249 : \(x58).(\(x59).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x58 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x59 : *) : +)~_));
ID_277 = 6.2831855f, ID_276;
ID_278 = (ID_277 : *);
ID_279 = ID_278, 0.5f;
ID_280 = (ID_279 : *);
ID_281 = ID_280, ID_63;
ID_282 = ID_281 : /;
ID_283 = (ID_282 : tan);
ID_284 = 1, ID_283;
ID_285 = (ID_284 : /);
ID_286 = 1.4142135f, ID_285;
ID_287 = (ID_286 : *);
ID_288 = 1, ID_287;
ID_289 = (ID_288 : -);
ID_290 = ID_285, ID_285;
ID_291 = (ID_290 : *);
ID_292 = ID_289, ID_291;
ID_293 = (ID_292 : +);
ID_294 = (ID_288 : +);
ID_295 = ID_294, ID_291;
ID_296 = (ID_295 : +);
ID_297 = ID_293, ID_296;
ID_298 = (ID_297 : /);
ID_299 = _, ID_298;
ID_300 = ID_299 : *;
ID_301 = (ID_10 : ID_300);
ID_302 = ID_275, ID_301;
ID_303 = ID_302 :> _;
ID_304 = (_ <: ID_303);
ID_305 = \(x64).(\(x65).(x65,x64 : -)) ~ ID_304;
ID_306 = 0, ID_259;
ID_307 = (ID_306 : *);
ID_308 = 1, ID_307;
ID_309 = (ID_308 : +);
ID_310 = 0, ID_261;
ID_311 = (ID_310 : *);
ID_312 = ID_309, ID_311;
ID_313 = (ID_312 : +);
ID_314 = ID_313, ID_271;
ID_315 = (ID_314 : /);
ID_316 = _, ID_315;
ID_317 = (ID_316 : *);
ID_318 = 0, ID_291;
ID_319 = (ID_318 : *);
ID_320 = 1, ID_319;
ID_321 = (ID_320 : -);
ID_322 = 2, ID_321;
ID_323 = (ID_322 : *);
ID_324 = ID_323, ID_296;
ID_325 = (ID_324 : /);
ID_326 = _, ID_325;
ID_327 = ID_326 : *;
ID_328 = (ID_10 : ID_327);
ID_329 = (ID_249 : \(x60).(\(x61).(((1.0f,(1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -) : -),x60 : *),((1,(44.1f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /) : -),x61 : *) : +)~_));
ID_330 = 6.2831855f, ID_329;
ID_331 = (ID_330 : *);
ID_332 = ID_331, 0.5f;
ID_333 = (ID_332 : *);
ID_334 = ID_333, ID_63;
ID_335 = ID_334 : /;
ID_336 = (ID_335 : tan);
ID_337 = 1, ID_336;
ID_338 = (ID_337 : /);
ID_339 = 0, ID_338;
ID_340 = (ID_339 : *);
ID_341 = 1, ID_340;
ID_342 = (ID_341 : -);
ID_343 = ID_338, ID_338;
ID_344 = (ID_343 : *);
ID_345 = 0, ID_344;
ID_346 = (ID_345 : *);
ID_347 = ID_342, ID_346;
ID_348 = (ID_347 : +);
ID_349 = 1.4142135f, ID_338;
ID_350 = (ID_349 : *);
ID_351 = 1, ID_350;
ID_352 = (ID_351 : +);
ID_353 = ID_352, ID_344;
ID_354 = (ID_353 : +);
ID_355 = ID_348, ID_354;
ID_356 = (ID_355 : /);
ID_357 = _, ID_356;
ID_358 = ID_357 : *;
ID_359 = (ID_15 : ID_358);
ID_360 = ID_328, ID_359;
ID_361 = ID_317, ID_360;
ID_362 = ID_361 :> _;
ID_363 = _ <: ID_362;
ID_364 = ID_305 : ID_363;
ID_365 = _ : ID_364;
ID_366 = ID_248 : ID_365;
ID_367 = ID_45 : ID_366;
process = ID_367;
