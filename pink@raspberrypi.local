declare version "2.54.9";
declare compile_options "-single -scal -e test_synth_og.dsp -o test_synth.dsp";
declare library_path0 "/usr/local/Cellar/faust/2.54.9/share/faust/stdfaust.lib";
declare library_path1 "/usr/local/Cellar/faust/2.54.9/share/faust/oscillators.lib";
declare library_path2 "/usr/local/Cellar/faust/2.54.9/share/faust/platform.lib";
declare library_path3 "/usr/local/Cellar/faust/2.54.9/share/faust/maths.lib";
declare library_path4 "/usr/local/Cellar/faust/2.54.9/share/faust/basics.lib";
declare library_path5 "/usr/local/Cellar/faust/2.54.9/share/faust/envelopes.lib";
declare library_path6 "/usr/local/Cellar/faust/2.54.9/share/faust/signals.lib";
declare author "Jeremy WY";
declare basics_lib_name "Faust Basic Element Library";
declare basics_lib_version "0.9";
declare copyright "GRAME";
declare envelopes_lib_adsre_author "Julius O. Smith III";
declare envelopes_lib_adsre_licence "STK-4.3";
declare envelopes_lib_author "GRAME";
declare envelopes_lib_copyright "GRAME";
declare envelopes_lib_license "LGPL with exception";
declare envelopes_lib_name "Faust Envelope Library";
declare envelopes_lib_version "0.2";
declare filename "test_synth.dsp";
declare license "LGPL with exception";
declare maths_lib_author "GRAME";
declare maths_lib_copyright "GRAME";
declare maths_lib_license "LGPL with exception";
declare maths_lib_name "Faust Math Library";
declare maths_lib_version "2.5";
declare name "test_synth";
declare oscillators_lib_name "Faust Oscillator Library";
declare oscillators_lib_version "0.3";
declare platform_lib_name "Generic Platform Library";
declare platform_lib_version "0.3";
declare signals_lib_name "Faust Signal Routing Library";
declare signals_lib_version "0.3";
ID_0 = (65536 : int);
ID_1 = _, ID_0;
ID_2 = (ID_1 : %);
ID_3 = (1 : mem);
ID_4 = _, ID_3;
ID_5 = (ID_4 : +);
ID_6 = ID_2 ~ ID_5;
ID_7 = (ID_6 : float);
ID_8 = ID_7, 6.2831855f;
ID_9 = (ID_8 : *);
ID_10 = (65536 : float);
ID_11 = ID_9, ID_10;
ID_12 = ID_11 : /;
ID_13 = (ID_12 : sin);
ID_14 = hslider("freq", 4.4e+02f, 2e+01f, 2e+03f, 0.01f);
ID_15 = fconstant(int fSamplingFreq, <math.h>);
ID_16 = 1.0f, ID_15;
ID_17 = (ID_16 : max);
ID_18 = 1.92e+05f, ID_17;
ID_19 = (ID_18 : min);
ID_20 = ID_14, ID_19;
ID_21 = (ID_20 : /);
ID_22 = _, ID_21;
ID_23 = (ID_22 : +);
ID_24 = ID_23, 0;
ID_25 = 0, ID_24;
ID_26 = ID_25 : select2;
ID_27 = (ID_26 : \(x1).(x1,(x1 : floor) : -));
ID_28 = ID_27 ~ _;
ID_29 = _, ID_10;
ID_30 = ID_29 : *;
ID_31 = ID_28 : ID_30;
ID_32 = (ID_31 : int);
ID_33 = ID_13, ID_32;
ID_34 = 65536, ID_33;
ID_35 = (ID_34 : rdtable);
ID_36 = ID_35, 0.5f;
ID_37 = ID_36 : *;
ID_38 = button("gate");
ID_39 = ID_38, 0;
ID_40 = (ID_39 : >);
ID_41 = _, ID_40;
ID_42 = (ID_41 : *);
ID_43 = + ~ ID_42;
ID_44 = (ID_40 : ID_43);
ID_45 = 0.01f, ID_19;
ID_46 = ID_45 : *;
ID_47 = (ID_46 : int);
ID_48 = ID_44, ID_47;
ID_49 = (ID_48 : <);
ID_50 = _, mem;
ID_51 = ID_50 : -;
ID_52 = _, 0;
ID_53 = (ID_52 : >);
ID_54 = ID_53, _;
ID_55 = ID_54 : *;
ID_56 = ID_51 <: ID_55;
ID_57 = _ <: ID_56;
ID_58 = (ID_40 : ID_57);
ID_59 = ID_49, ID_58;
ID_60 = (ID_59 : |);
ID_61 = (ID_40 : float);
ID_62 = 0.5f, ID_61;
ID_63 = (ID_62 : *);
ID_64 = ID_63, ID_40;
ID_65 = ID_60, ID_64;
ID_66 = (ID_65 : select2);
ID_67 = 0.0f, ID_66;
ID_68 = ID_40, ID_67;
ID_69 = ID_68 : select2;
ID_70 = (ID_69 : \(x2).(\(x3).(((1.0f,(((((button("gate"),0 : >),1,((((button("gate"),0 : > : +~(_,(button("gate"),0 : >) : *)),(0.01f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),0.1f,0.01f : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(-1.0f,((((((button("gate"),0 : >),1,((((button("gate"),0 : > : +~(_,(button("gate"),0 : >) : *)),(0.01f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),0.1f,0.01f : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(((button("gate"),0 : >),1,((((button("gate"),0 : > : +~(_,(button("gate"),0 : >) : *)),(0.01f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),0.1f,0.01f : select2) : select2),6.91f : /),1.0f : select2),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x2 : *),((((((button("gate"),0 : >),1,((((button("gate"),0 : > : +~(_,(button("gate"),0 : >) : *)),(0.01f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),0.1f,0.01f : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(-1.0f,((((((button("gate"),0 : >),1,((((button("gate"),0 : > : +~(_,(button("gate"),0 : >) : *)),(0.01f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),0.1f,0.01f : select2) : select2),6.91f : / : abs),1.1920929e-07f : <),(((button("gate"),0 : >),1,((((button("gate"),0 : > : +~(_,(button("gate"),0 : >) : *)),(0.01f,(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : * : int) : <),(button("gate"),0 : > : _<:_,mem : -<:(_,0 : >),_ : *) : |),0.1f,0.01f : select2) : select2),6.91f : /),1.0f : select2),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x3 : *) : +)~_));
ID_71 = _, ID_70;
ID_72 = (ID_71 : *);
ID_73 = hslider("gain", 0.0f, 0.0f, 1.0f, 0.001f);
ID_74 = ID_72, ID_73;
ID_75 = ID_74 : *;
ID_76 = ID_37 : ID_75;
process = ID_76;
